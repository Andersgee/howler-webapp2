datasource db {
  provider = "mysql"
  url = env("DATABASE_MYSQL_URL")
}
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

model CloudMessageAccessToken {
  id BigInt @db.UnsignedBigInt
  token String @db.VarChar(2000)
  expires DateTime @db.DateTime(3)

  @@id([id])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)
}

model DeletedEventImages {
  image String @db.VarChar(100)

  @@id([image])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)
}

model Event {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  createdAt DateTime @db.DateTime(3) @default(now())
  updatedAt DateTime @db.DateTime(3) @default(now()) @updatedAt
  title String @db.VarChar(55)
  date DateTime @db.DateTime(3) @default(now())
  location Unsupported("point")?
  locationName String? @db.VarChar(55)
  creatorId BigInt @db.UnsignedBigInt
  image String? @db.VarChar(100)
  imageBlurData Bytes? @db.VarBinary(255)
  imageAspect Float @db.Float @default(1)

  @@id([id])
  @@index([creatorId])
  @@fulltext([title, locationName])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)

  Event_creatorId_fkey User @relation("Event_creatorId_fkey", fields: [creatorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  UserEventPivot_eventId_fkey UserEventPivot[] @relation("UserEventPivot_eventId_fkey")
}

model FcmToken {
  token String @db.VarChar(200)
  userId BigInt @db.UnsignedBigInt

  @@id([token])
  @@index([userId])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)

  FcmToken_userId_fkey User @relation("FcmToken_userId_fkey", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Notification {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  title String @db.VarChar(55)
  body String @db.VarChar(55)
  relativeLink String @db.VarChar(55)
  createdAt DateTime @db.DateTime(3) @default(now())

  @@id([id])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)
  UserNotificationPivot_notificationId_fkey UserNotificationPivot[] @relation("UserNotificationPivot_notificationId_fkey")
}

model Post {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  text String
  createdAt DateTime @db.DateTime(3) @default(now())
  updatedAt DateTime @db.DateTime(3) @default(now()) @updatedAt
  userId BigInt @db.UnsignedBigInt

  @@id([id])
  @@index([userId])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)

  Post_userId_fkey User @relation("Post_userId_fkey", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model User {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  email String
  googleUserSub String?
  discordUserId String?
  githubUserId Int?
  image String?
  name String
  createdAt DateTime @db.DateTime(3) @default(now())
  updatedAt DateTime @db.DateTime(3) @default(now()) @updatedAt
  role User_role_enum @default(USER)
  facebookdUserId String?

  @@id([id])
  @@unique([email])
  @@unique([googleUserSub])
  @@unique([discordUserId])
  @@unique([githubUserId])
  @@unique([facebookdUserId])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)
  FcmToken_userId_fkey FcmToken[] @relation("FcmToken_userId_fkey")
  UserEventPivot_userId_fkey UserEventPivot[] @relation("UserEventPivot_userId_fkey")
  Post_userId_fkey Post[] @relation("Post_userId_fkey")
  Event_creatorId_fkey Event[] @relation("Event_creatorId_fkey")
  UserUserPivot_userId_fkey UserUserPivot[] @relation("UserUserPivot_userId_fkey")
  UserUserPivot_followerId_fkey UserUserPivot[] @relation("UserUserPivot_followerId_fkey")
  UserNotificationPivot_userId_fkey UserNotificationPivot[] @relation("UserNotificationPivot_userId_fkey")
}

model UserEventPivot {
  userId BigInt @db.UnsignedBigInt
  eventId BigInt @db.UnsignedBigInt
  joinDate DateTime @db.DateTime(3) @default(now())

  @@id([eventId, userId])
  @@index([userId])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)

  UserEventPivot_userId_fkey User @relation("UserEventPivot_userId_fkey", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  UserEventPivot_eventId_fkey Event @relation("UserEventPivot_eventId_fkey", fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserNotificationPivot {
  userId BigInt @db.UnsignedBigInt
  notificationId BigInt @db.UnsignedBigInt

  @@id([userId, notificationId])
  @@index([notificationId])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)

  UserNotificationPivot_notificationId_fkey Notification @relation("UserNotificationPivot_notificationId_fkey", fields: [notificationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  UserNotificationPivot_userId_fkey User @relation("UserNotificationPivot_userId_fkey", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserUserPivot {
  userId BigInt @db.UnsignedBigInt
  followerId BigInt @db.UnsignedBigInt
  createdAt DateTime @db.DateTime(3) @default(now())

  @@id([userId, followerId])
  @@index([followerId])

  //any relation fields below here are for prisma syntax only (they dont do anything at db level)

  UserUserPivot_userId_fkey User @relation("UserUserPivot_userId_fkey", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  UserUserPivot_followerId_fkey User @relation("UserUserPivot_followerId_fkey", fields: [followerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum User_role_enum {
  USER
  ADMIN
}

