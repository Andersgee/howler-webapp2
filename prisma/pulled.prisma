datasource db {
  provider = "mysql"
  url = env("DATABASE_MYSQL_URL")
}
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

model CloudMessageAccessToken {
  id BigInt @db.UnsignedBigInt
  token String @db.VarChar(2000)
  expires DateTime @db.DateTime(3)

  @@id([id])
}

model DeletedEventImages {
  image String @db.VarChar(100)

  @@id([image])
}

model Event {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  createdAt DateTime @db.DateTime(3) @default(now())
  updatedAt DateTime @db.DateTime(3) @default(now()) @updatedAt
  title String @db.VarChar(55)
  date DateTime @db.DateTime(3) @default(now())
  location Unsupported("point")?
  creatorId BigInt @db.UnsignedBigInt
  locationName String? @db.VarChar(55)
  image String? @db.VarChar(100)
  imageAspect Float @db.Float @default(1)
  imageBlurData Bytes? @db.VarBinary(255)

  Event_creatorId_fkey User @relation(fields: [creatorId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  UserEventPivot_eventId_fkey UserEventPivot[]

  @@id([id])
  @@index([creatorId])
  @@fulltext([title, locationName])
}

model FcmToken {
  token String @db.VarChar(200)
  userId BigInt @db.UnsignedBigInt

  FcmToken_userId_fkey User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([token])
  @@index([userId])
}

model Notification {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  title String @db.VarChar(55)
  body String @db.VarChar(55)
  relativeLink String @db.VarChar(55)
  createdAt DateTime @db.DateTime(3) @default(now())

  UserNotificationPivot_notificationId_fkey UserNotificationPivot[]

  @@id([id])
}

model Post {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  text String
  createdAt DateTime @db.DateTime(3) @default(now())
  updatedAt DateTime @db.DateTime(3) @default(now()) @updatedAt
  userId BigInt @db.UnsignedBigInt

  Post_userId_fkey User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([id])
  @@index([userId])
}

model User {
  id BigInt @db.UnsignedBigInt @default(autoincrement())
  email String
  googleUserSub String?
  discordUserId String?
  githubUserId Int?
  image String?
  name String
  createdAt DateTime @db.DateTime(3) @default(now())
  updatedAt DateTime @db.DateTime(3) @default(now()) @updatedAt
  role User_role_enum @default(USER)

  Event_creatorId_fkey Event[]
  FcmToken_userId_fkey FcmToken[]
  Post_userId_fkey Post[]
  UserEventPivot_userId_fkey UserEventPivot[]
  UserNotificationPivot_userId_fkey UserNotificationPivot[]
  UserUserPivot_userId_fkey UserUserPivot[]
  UserUserPivot_followerId_fkey UserUserPivot[]

  @@id([id])
  @@unique([email])
  @@unique([googleUserSub])
  @@unique([discordUserId])
  @@unique([githubUserId])
}

model UserEventPivot {
  userId BigInt @db.UnsignedBigInt
  eventId BigInt @db.UnsignedBigInt
  joinDate DateTime @db.DateTime(3) @default(now())

  UserEventPivot_userId_fkey User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  UserEventPivot_eventId_fkey Event @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([eventId, userId])
  @@index([userId])
}

model UserNotificationPivot {
  userId BigInt @db.UnsignedBigInt
  notificationId BigInt @db.UnsignedBigInt

  UserNotificationPivot_userId_fkey User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  UserNotificationPivot_notificationId_fkey Notification @relation(fields: [notificationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, notificationId])
  @@index([notificationId])
}

model UserUserPivot {
  userId BigInt @db.UnsignedBigInt
  followerId BigInt @db.UnsignedBigInt
  createdAt DateTime @db.DateTime(3) @default(now())

  UserUserPivot_userId_fkey User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  UserUserPivot_followerId_fkey User @relation(fields: [followerId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, followerId])
  @@index([followerId])
}

enum User_role_enum {
  USER
  ADMIN
}

